/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/users/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Users:Current User */
    get: operations['users_current_user_users_me_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Users:Patch Current User */
    patch: operations['users_patch_current_user_users_me_patch'];
    trace?: never;
  };
  '/users/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Users:User */
    get: operations['users_user_users__id__get'];
    put?: never;
    post?: never;
    /** Users:Delete User */
    delete: operations['users_delete_user_users__id__delete'];
    options?: never;
    head?: never;
    /** Users:Patch User */
    patch: operations['users_patch_user_users__id__patch'];
    trace?: never;
  };
  '/auth/google/authorize': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Oauth:Google.Jwt.Authorize */
    get: operations['oauth_google_jwt_authorize_auth_google_authorize_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/google/callback': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Oauth:Google.Jwt.Callback
     * @description The response varies based on the authentication backend used.
     */
    get: operations['oauth_google_jwt_callback_auth_google_callback_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Courses */
    get: operations['read_courses_courses__get'];
    put?: never;
    /** Create Course */
    post: operations['create_course_courses__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/{course_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Course */
    get: operations['read_course_courses__course_id__get'];
    /** Update Course */
    put: operations['update_course_courses__course_id__put'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/{course_id}/reviews': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Reviews */
    get: operations['read_reviews_courses__course_id__reviews_get'];
    put?: never;
    /** Create Review */
    post: operations['create_review_courses__course_id__reviews_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/streams/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Streams */
    get: operations['read_streams_streams__get'];
    put?: never;
    /** Create Stream */
    post: operations['create_stream_streams__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/streams/{stream_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Stream */
    get: operations['read_stream_streams__stream_id__get'];
    /** Update Stream */
    put: operations['update_stream_streams__stream_id__put'];
    post?: never;
    /**
     * Delete Stream
     * @description Available only for course stream creator
     */
    delete: operations['delete_stream_streams__stream_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/streams/{stream_id}/participate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Participate In Stream */
    post: operations['participate_in_stream_streams__stream_id__participate_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/authenticated-route': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Authenticated Route */
    get: operations['authenticated_route_authenticated_route_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** CourseCreate */
    CourseCreate: {
      /** Title */
      title: string;
      /** Description */
      description: string;
      /** Course Url */
      course_url: string;
    };
    /** CourseRead */
    CourseRead: {
      /** Title */
      title: string;
      /** Description */
      description: string;
      /** Course Url */
      course_url: string;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /** CourseUpdate */
    CourseUpdate: {
      /** Title */
      title: string;
      /** Description */
      description: string;
      /** Course Url */
      course_url: string;
    };
    /** ErrorModel */
    ErrorModel: {
      /** Detail */
      detail:
        | string
        | {
            [key: string]: string | undefined;
          };
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** OAuth2AuthorizeResponse */
    OAuth2AuthorizeResponse: {
      /** Authorization Url */
      authorization_url: string;
    };
    /** Pagination[CourseRead] */
    Pagination_CourseRead_: {
      /** Page */
      page: number;
      /** Per Page */
      per_page: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components['schemas']['CourseRead'][];
    };
    /** Pagination[StreamRead] */
    Pagination_StreamRead_: {
      /** Page */
      page: number;
      /** Per Page */
      per_page: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components['schemas']['StreamRead'][];
    };
    /** ReviewCreate */
    ReviewCreate: {
      /** Rating */
      rating: number;
      /** Comment */
      comment: string | null;
    };
    /** ReviewRead */
    ReviewRead: {
      /** Rating */
      rating: number;
      /** Comment */
      comment: string | null;
      /** Id */
      id: number;
      /** Course Id */
      course_id: number;
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /** StreamCreate */
    StreamCreate: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Total Cost */
      total_cost: number;
      /** Min Participants */
      min_participants: number;
      /** Max Participants */
      max_participants: number;
      /** Duration Weeks */
      duration_weeks: number;
      /** Schedule */
      schedule: string;
      /** Course Id */
      course_id: number;
    };
    /** StreamRead */
    StreamRead: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Total Cost */
      total_cost: number;
      /** Min Participants */
      min_participants: number;
      /** Max Participants */
      max_participants: number;
      /** Duration Weeks */
      duration_weeks: number;
      /** Schedule */
      schedule: string;
      /** Id */
      id: number;
      /**
       * Leader Id
       * Format: uuid
       */
      leader_id: string;
      /** Course Id */
      course_id: number;
      /** Course Name */
      course_name: string;
      /** Has Started */
      has_started: boolean;
      /** Start Date */
      start_date: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Participants */
      participants: string[];
    };
    /** StreamUpdate */
    StreamUpdate: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Total Cost */
      total_cost: number;
      /** Min Participants */
      min_participants: number;
      /** Max Participants */
      max_participants: number;
      /** Duration Weeks */
      duration_weeks: number;
      /** Schedule */
      schedule: string;
      /** Has Started */
      has_started: boolean;
    };
    /** UserRead */
    UserRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Email
       * Format: email
       */
      email: string;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean;
      /**
       * Is Superuser
       * @default false
       */
      is_superuser: boolean;
      /**
       * Is Verified
       * @default false
       */
      is_verified: boolean;
    };
    /** UserUpdate */
    UserUpdate: {
      /** Password */
      password?: string | null;
      /** Email */
      email?: string | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Is Superuser */
      is_superuser?: boolean | null;
      /** Is Verified */
      is_verified?: boolean | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  users_current_user_users_me_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  users_patch_current_user_users_me_patch: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  users_user_users__id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not a superuser. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The user does not exist. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  users_delete_user_users__id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Missing token or inactive user. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not a superuser. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The user does not exist. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  users_patch_user_users__id__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Missing token or inactive user. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not a superuser. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The user does not exist. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  oauth_google_jwt_authorize_auth_google_authorize_get: {
    parameters: {
      query?: {
        scopes?: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OAuth2AuthorizeResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  oauth_google_jwt_callback_auth_google_callback_get: {
    parameters: {
      query?: {
        code?: string | null;
        code_verifier?: string | null;
        state?: string | null;
        error?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  read_courses_courses__get: {
    parameters: {
      query?: {
        /** @description Page number starting from 1 */
        page?: number;
        /** @description Number of items per page */
        per_page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Pagination_CourseRead_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_course_courses__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CourseCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CourseRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  read_course_courses__course_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        course_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CourseRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_course_courses__course_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        course_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CourseUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CourseRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  read_reviews_courses__course_id__reviews_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        course_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewRead'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_review_courses__course_id__reviews_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        course_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReviewCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  read_streams_streams__get: {
    parameters: {
      query?: {
        /** @description Page number starting from 1 */
        page?: number;
        /** @description Number of items per page */
        per_page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Pagination_StreamRead_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_stream_streams__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['StreamCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StreamRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  read_stream_streams__stream_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        stream_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StreamRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_stream_streams__stream_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        stream_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['StreamUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StreamRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_stream_streams__stream_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        stream_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  participate_in_stream_streams__stream_id__participate_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        stream_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  authenticated_route_authenticated_route_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
}
